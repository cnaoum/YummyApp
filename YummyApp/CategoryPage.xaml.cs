using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Windows;
using System.Windows.Controls;
using System.Windows.Data;
using System.Windows.Documents;
using System.Windows.Input;
using System.Windows.Media;
using System.Windows.Media.Imaging;
using System.Windows.Shapes;

namespace YummyApp
{
    /// <summary>
    /// Interaction logic for CategoryPage.xaml
    /// </summary>
    public partial class CategoryPage : Window
    {
        yummyDatabaseDataContext dc = new yummyDatabaseDataContext();
        Category category;
        public CategoryPage()
        {
            InitializeComponent();
            // subscribing to the auto generated columns event from the category datagrid
            categoryDataGrid.AutoGeneratedColumns += categoryDg_AutoGeneratedColumns;
            loadCategory();
            fillCategoryComboBox();
        }

        //fill the category Dropbox at loading time
        public void fillCategoryComboBox()
        {
            try
            {
                List<Category> data = dc.Categories.ToList();
                searchCategory.ItemsSource = data;
                searchCategory.DisplayMemberPath = "CategoryName";
                searchCategory.SelectedValuePath = "CategoryId";
            }catch(Exception ex)
            {
                MessageBox.Show(ex.Message, " error");
            }
        }

        /// delegate called by the auto generated columns event, hides the categoryId colum from the Category datagrid
        private void categoryDg_AutoGeneratedColumns(object sender, EventArgs e)
        {
            categoryDataGrid.Columns[0].Visibility = Visibility.Hidden;
        }

        //load category in DataGrid
        public void loadCategory()
        {
            try
            {
                categoryDataGrid.ItemsSource = dc.Categories.Select(category => new { category.CategoryId, category.CategoryName });
            }catch(Exception ex)
            {
                MessageBox.Show(ex.Message, " error");
            }
        }

        //Fill datagrid according to selected value in category comboBox
        private void categorySelectedFromComboBox(object sender, SelectionChangedEventArgs e)
        {
            try
            {
                var selectedCategory = searchCategory.SelectedItem as Category;
                categoryDataGrid.ItemsSource = from C in dc.Categories where C.CategoryName == selectedCategory.CategoryName select new { C.CategoryId, C.CategoryName };
            }catch(Exception ex) 
            { 
                MessageBox.Show(ex.Message, " error"); 
            }
        }

        //get selected category from category data
        private void categoryDataGrid_SelectionChanged(object sender, SelectionChangedEventArgs e)
        {
            try
            {
                if (categoryDataGrid.SelectedItem != null)
                {
                    int categoryId = (categoryDataGrid.SelectedItem as dynamic).CategoryId;
                    category = dc.Categories.Where(category => category.CategoryId == categoryId).Single();
                    CategoryForm cf = new CategoryForm(category);
                    cf.Show();
                    this.Close();
                }
            }catch(Exception ex)
            {
                MessageBox.Show(ex.Message, " error");
            }
        }
    }
}
