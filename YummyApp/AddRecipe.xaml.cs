using Microsoft.Win32;
using System;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Windows;
using System.Windows.Controls;
using System.Windows.Data;
using System.Windows.Documents;
using System.Windows.Input;
using System.Windows.Media;
using System.Windows.Media.Imaging;
using System.Windows.Shapes;

namespace YummyApp
{
    /// <summary>
    /// Interaction logic for AddRecipe.xaml
    /// </summary>
    //Created by Carolina Naoum Junqueira
    public partial class AddRecipe : Window
    {
        yummyDatabaseDataContext dc = new yummyDatabaseDataContext();
        BitmapImage bitmapImage; 
        Recipe recipe;
        //if a user deletes ingredients from the recipe they will be save in this list until they save changes to the recipe,
        //if user cancels recipe changes the recipe ingredients from this list will not be deleted from the data base
        List<RecipeIngredient> recipeIngredientsToDelete = new List<RecipeIngredient>();

        //if user is editing a recipe, the recipe id is passed in the constructor
        public AddRecipe(int? recipeId = null)
        {
            InitializeComponent();

            //subscribing to the auto generated columns event from the recipeIngredient datagrid
            //this is used to hide the column id and setting column 3 width to use all the extra space in the row
            dgRecipeIngredients.AutoGeneratedColumns += DgRecipeIngredients_AutoGeneratedColumns;
            
            //checks if recipe ID in null, and creates a new instance of recipe
            if (recipeId == null)
            {
                recipe = new Recipe();
                loadCategories();
            }
            else //if user is editing an existing recipe it will load all the fields to the recipe
            {
                recipe = dc.Recipes.Where(recipe => recipe.RecipeId == recipeId).Single();
                loadCategories(recipe.Category);

                if (recipe.Image != null) //if there is an img for the recipe this will load it to the page.
                {
                    bitmapImage = new BitmapImage();
                    bitmapImage.BeginInit();
                    bitmapImage.StreamSource = new MemoryStream(recipe.Image.ToArray());
                    bitmapImage.EndInit();
                    imgRecipePhoto.Source = bitmapImage;
                }
               
                //loads all the other information to the form
                txtRecipeName.Text = recipe.Name;
                txtRecipePrepTime.Text = recipe.PrepTime.ToString();
                txtRecipeServings.Text = recipe.Serving.ToString();
                txtRecipeDescription.Text = recipe.Description;
                txtRecipeDirections.Text = recipe.Directions;
            }

            //populates the recipe ingredients datagrid and giving the columns names. 
            //Creating it as anonymous type so that the id can be loaded, but but keept hidden.
            //And because ingredient is a forign key from Ingredient table and we need to get the ingredient name.
            //Setting columns that will be added to the data grid with  column names.
            dgRecipeIngredients.ItemsSource = recipe.RecipeIngredients.Select(ingredient => new { ingredient.Id, ingredient.Quantity, ingredient.Measurement, Ingredient = ingredient.Ingredient.Name });
        }

        //This method is used to hide the recipeIngredient ID column and set the Ingredient column length to fill
        private void DgRecipeIngredients_AutoGeneratedColumns(object sender, EventArgs e)
        {
            dgRecipeIngredients.Columns[0].Visibility = Visibility.Hidden;
            dgRecipeIngredients.Columns[3].Width = new DataGridLength(1, DataGridLengthUnitType.Star);
        }

        //This method is used to select an image from file.
        private void btnAddImage_Click(object sender, RoutedEventArgs e)
        {
            OpenFileDialog openFileDialog = new OpenFileDialog();
            openFileDialog.Title = "Select a recipe photo";
            openFileDialog.Filter = "All supported graphics|*.jpg;*.jpeg;*.png|JPEG (*.jpg;*.jpeg)|*.jpg;*.jpeg|Portable Network Graphic (*.png)|*.png";
            if ((bool)openFileDialog.ShowDialog())
            {
                bitmapImage = new BitmapImage();
                bitmapImage.BeginInit();
                bitmapImage.StreamSource = System.IO.File.OpenRead(openFileDialog.FileName);
                bitmapImage.EndInit();
                imgRecipePhoto.Source = bitmapImage;
            }
        }

        //delete image from table
        private void btnDeleteImage_Click(object sender, RoutedEventArgs e)
        {
            imgRecipePhoto.Source = null;
            bitmapImage = null;
        }


        //Method that  validates entries and saves recipe to Database
        private void btnSaveRecipe_Click(object sender, RoutedEventArgs e)
        {
            string errorMessage = null;
            if (!string.IsNullOrEmpty(txtRecipeName.Text))
            {
                recipe.Name = txtRecipeName.Text;
            }
            else
            {
                errorMessage += "Please write the recipe name.\n";
            }
            if (!string.IsNullOrEmpty(txtRecipeServings.Text))
                recipe.Serving = Convert.ToInt32(txtRecipeServings.Text);

            if (!string.IsNullOrEmpty(txtRecipePrepTime.Text))
                recipe.PrepTime = Convert.ToInt32(txtRecipePrepTime.Text);

            recipe.Description = txtRecipeDescription.Text;

            if (!string.IsNullOrEmpty(txtRecipeDirections.Text))
            {
                recipe.Directions = txtRecipeDirections.Text;
            }
            else
            {
                errorMessage += "Please write the directions.\n";
            }

            if ((int)cbRecipeCategory.SelectedValue != 0)
            {
                recipe.Category = (int)cbRecipeCategory.SelectedValue;
            }
            else
            {
                errorMessage += "Please select a category.\n";
            }
            //if the user added an image to the recipe this will convert it to and array of bytes to be saved in the database table
            if (bitmapImage != null)
            {
                byte[] imageData = new byte[bitmapImage.StreamSource.Length];
                // now, you have get the image bytes array, and you can store it to SQl Server
                bitmapImage.StreamSource.Seek(0, SeekOrigin.Begin);
                //very important, it should be set to the start of the stream
                bitmapImage.StreamSource.Read(imageData, 0, imageData.Length);
                recipe.Image = imageData;
            } else
            {
                recipe.Image = null;
            }

            // if there are no errorMessages it will save recipes to database
            if (errorMessage == null)
            {
                //if its a new recipe it will insert a new instance of recipe on submit
                if (recipe.RecipeId == 0)
                    dc.Recipes.InsertOnSubmit(recipe);

                //if the user is editting a recipe and deletes an ingredient we need to first delete the ingredients from the RecipeIngredients
                //table before submiting changes, but we cant delete them from the table before user submits changes to recipe, so we save them
                //in a list and we only delete ingredients from the list if user saves changes to recipe. When submiting changes to a recipe this
                //if checkes if there are any recipe ingredients to be deleted.
                if (recipeIngredientsToDelete.Any())
                    dc.RecipeIngredients.DeleteAllOnSubmit(recipeIngredientsToDelete);

                dc.SubmitChanges();
                Close();
            }
            //if there are any errors during validation a message box will pop up with a list of errors.
            else
            {
                MessageBox.Show(errorMessage, "Error");
            }
            
        }

        //this method loads category combo box from database
        private void loadCategories(int selectedValue = 0)
        {
            List<Category> Categories = dc.Categories.ToList();
            Categories.Insert(0, new Category { CategoryId = 0, CategoryName = "Select a Category" });
            cbRecipeCategory.ItemsSource = Categories;
            cbRecipeCategory.DisplayMemberPath = "CategoryName";
            cbRecipeCategory.SelectedValuePath = "CategoryId";
            cbRecipeCategory.SelectedValue = selectedValue;
        }

        //this button adds a recipe ingredient to the recipe ingredient datagrid and resets the text boxes
        private void btnAddRecipeIngredient_Click(object sender, RoutedEventArgs e)
        {
            if (txtRecipeIngredientQuantity.Text != "" && cbRecipeIngredientMeasurement.Text != ""  && txtRecipeIngredientIngredient.Text != "")
            {
                RecipeIngredient recipeIngredient = new RecipeIngredient();
                recipeIngredient.Ingredient = new Ingredient() { Name = txtRecipeIngredientIngredient.Text };
                recipeIngredient.Recipe = recipe;
                recipeIngredient.Quantity = Convert.ToDouble(txtRecipeIngredientQuantity.Text);
                recipeIngredient.Measurement = cbRecipeIngredientMeasurement.Text;
                recipe.RecipeIngredients.Add(recipeIngredient);
                dgRecipeIngredients.ItemsSource = recipe.RecipeIngredients.Select(ingredient => new { ingredient.Id, ingredient.Quantity, ingredient.Measurement, Ingredient = ingredient.Ingredient.Name });
                txtRecipeIngredientQuantity.Text = "";
                txtRecipeIngredientIngredient.Text = "";
            }
            else
            {
                MessageBox.Show("Please fill in all ingredient fields.", "Add Ingredient");
            }
        }

        //method to edit a recipe ingredient
        private void btnAddrecipeEditRecipeIngredient_Click(object sender, RoutedEventArgs e)
        {
            //if the user has selected a recipe ingredient from the datagrid a new window will open with the information from ingredient user wants to edit
            if (dgRecipeIngredients.SelectedItem != null)
            {
                //calls method get recipeIngredient to set value of recipeIngredient
                RecipeIngredient recipeIngredient = getRecipeIngredient(dgRecipeIngredients.SelectedItem);
                EditRecipeIngredients edit = new EditRecipeIngredients(recipeIngredient);
                edit.ShowDialog();
                dgRecipeIngredients.ItemsSource = recipe.RecipeIngredients.Select(ingredient => new { ingredient.Id, ingredient.Quantity, ingredient.Measurement, Ingredient = ingredient.Ingredient.Name });
            }
            else
            {
                MessageBox.Show("Please select a ingredient to update.", "Edit Ingredient");
            }
        }

        //method to delete Recipe ingredient from recipe ingredient table
        //it removes the ingredient from the datagrid and if ingredien has an id != 0 it is added to the list of ingredients to be deleted once the user saves the changes to the recipe.
        //if user does not save changes to recipe no changes to ingredients will be saved.
        private void btnAddrecipeDeleteRecipeIngredient_Click(object sender, RoutedEventArgs e)
        {

            if (dgRecipeIngredients.SelectedItem != null)
            {
                var ingredientName = (dgRecipeIngredients.SelectedItem as dynamic).Ingredient;
                MessageBoxResult result = MessageBox.Show($"Are you sure you want to delete ingredient '{ingredientName}' ?", "Delete Ingredient", MessageBoxButton.YesNo);

                if (result == MessageBoxResult.Yes)
                {
                    var recipeIngredient = getRecipeIngredient(dgRecipeIngredients.SelectedItem);
                    recipe.RecipeIngredients.Remove(recipeIngredient);
                    //if recipeIngredient is different from 0 it means its already saved in the data base, so we need to save them to 
                    //to the recipeIngredientsToDelete List to be deleted once recipe changes are saved by user.
                    if (recipeIngredient.Id != 0)
                    {
                        recipeIngredientsToDelete.Add(recipeIngredient);
                    }
                    //updates the recipeIngredient dataGrid.
                    dgRecipeIngredients.ItemsSource = recipe.RecipeIngredients.Select(ingredient => new { ingredient.Id, ingredient.Quantity, ingredient.Measurement, Ingredient = ingredient.Ingredient.Name });
                }            
            }
            else
            {
                MessageBox.Show("Please select a ingredient to delete.", "Delete Ingredient");
            }
        }

        //method that checkes if recipeIngredients from datagrid  have been saved or not and edit or delete accordingly.
        //since before saving their id's are all 0, we have to ckeck quantity, measurement and ingredient name to select recipeIngredient 
        private RecipeIngredient getRecipeIngredient(dynamic dataGridObject)
        {
            RecipeIngredient recipeIngredient;

            //if the recipe ingredient hasnt been saved to the database, this is how we select the ingredient to edit or delete from datagrid
            if (dataGridObject.Id == 0)
            {
                recipeIngredient = recipe.RecipeIngredients.First(
                ri => ri.Id == dataGridObject.Id &&
                ri.Quantity == dataGridObject.Quantity &&
                ri.Measurement == dataGridObject.Measurement &&
                ri.Ingredient.Name == dataGridObject.Ingredient
                );
            }
            else
            {
                //if recipe ingredient has already been saved to the database we select it by using the ID.
                recipeIngredient = recipe.RecipeIngredients.Single(ri => ri.Id == dataGridObject.Id);
            }
            return recipeIngredient;
        }
    }
}
